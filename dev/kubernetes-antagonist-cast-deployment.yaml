apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: antagonist-cast
spec:
  replicas: 2
  selector:
    matchLabels:
      app: antagonist-cast
  strategy:
    type: RollingUpdate
  minReadySeconds: 30
  template:
    metadata:
      labels:
        app: antagonist-cast
        tier: backend
        bump: bump-4
    spec:
      imagePullSecrets:
        - name: myregistrykey
      volumes:
        - name: "antagonist-cast-tls"
          secret:
            secretName: "antagonist-cast-tls"
        - name: "nginx-antagonist-cast-dev-proxf-conf"
          configMap:
            name: "nginx-antagonist-cast-dev-proxf-conf"
            items:
              - key: "nginx-antagonist-cast.conf"
                path: "nginx-antagonist-cast.conf"
      containers:
        - name: nginx
          image: nginx:1.7.9
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          ports:
            - containerPort: 443
          lifecycle:
            preStop:
              exec:
                command: ["/usr/sbin/nginx", "-s", "quit"]
          volumeMounts:
            - name: "nginx-antagonist-cast-dev-proxf-conf"
              mountPath: "/etc/nginx/conf.d"
            - name: "antagonist-cast-tls"
              mountPath: "/etc/tls"
        - name: antagonist-cast
          image: eu.gcr.io/api-event-horizon-151020/antagonist-cast:0.0.2
          imagePullPolicy: Always
          env:
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: kafka.dev.sudostream.io:9092
          resources:
            limits:
              cpu: 100m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          ports:
            - containerPort: 9030
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 300
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 300
            timeoutSeconds: 5
